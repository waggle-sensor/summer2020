Argonne Log

Week 1 (6/15 - 6/19)
1. Kickoff and orientation
2. TMS training courses
3. Writing coach sessions
4. Met supervisor and mentor, figured out project topic

Week 2 (6/22-6/26)

Monday 6/22 
1. Mac Software update
2. Downloaded Xcode
3. Installed Homebrew, Python, pip, other packages and prerequisites for OpenCV
4. Downloaded and compiled OpenCV 4
5. Finished TMS Training Courses

Tuesday 6/23
1. Finished Python and OpenCV set up
2. Coded my first project using OpenCV
3. Finished laying out project timeline
4. Worked on NAISE deliverables

Wednesday 6/24
1. Attended virtual LANS seminar on building compilers for numerical programming
2. Finished and submitted NAISE deliverables (paragraph, powerpoint, video, quad chart)
3. CELS student hangout
4. OpenCV project: 4 point getPerspective transformation (https://www.pyimagesearch.com/2014/08/25/4-point-opencv-getperspective-transform-example/)

Thursday 6/25
1. AI/ML Scrum
2. Student Lecture (Survey of Argonne I/O Research)
3. Document Scanner with OpenCV (https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/)
4. Student Connects Meeting
5. Youtube OpenCV Tutorials parts 3 - 9 (https://www.youtube.com/playlist?list=PLS1QulWo1RIa7D1O6skqDQ-JZ1GGHKK-K)
6. Signed up for free 17-day computer vision and deep learning crash course by PyImageSearch

Friday 6/26
1. Coffee with Mike Papka
2. YouTube OpenCV Tutorials part 10 - 15
3. Cristina Check In Meeting
4. PyImageSearch OpenCV course day 1 (https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/)

Week 3 (6/29 - 7/2)

Monday 6/29
1. YouTube OpenCV Tutorials part 16 - 20
2. PyImageSearch Course day 2 (https://www.pyimagesearch.com/2018/07/19/opencv-tutorial-a-guide-to-learn-opencv/)
3. Revisited last week's OpenCV projects (doc scanner, facial detection) with more knowledge of OpenCV from the tutorials
4. Collected and organized additional PyImageSearch tutorials
5. Began research on crowds and computer vision

Tuesday 6/30
1. AI/ML Scrum Meeting
2. NAISE check-in meeting
3. Writing Coach Session
4. YouTube OpenCV Tutorial part 21 - 25
5. PyImageSearch Course day 3 (https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/)
6. Went through sample chapter from Practical Python and OpenCV by Dr. Adrian Rosebrock (Chapter 10: Gradients and Edge Detection)
7. PyImageSearch tutorial: Distance from Camera to Object (https://www.pyimagesearch.com/2015/01/19/find-distance-camera-objectmarker-using-python-opencv/)

Wednesday 7/1
1. Student Seminar (IP Overview)
2. EVS Seminar
3. CELS Student Hang
4. YouTube OpenCV Tutorial part 26 - 30
5. PyImageSearch Course day 4 (https://www.pyimagesearch.com/2016/10/03/bubble-sheet-multiple-choice-scanner-and-test-grader-using-omr-python-and-opencv/)
6. PyImageSearch tutorial: Shape Detection (https://www.pyimagesearch.com/2016/02/08/opencv-shape-detection/)

Thursday 7/2
1. AI/ML Scrum
2. AI/ML Demo
3. YouTube OpenCV Tutorial part 31 - 34
4. PyImageSearch Course day 5 (https://www.pyimagesearch.com/2015/09/14/ball-tracking-with-opencv/)
5. Student Connects Meeting
6. PyImageSearch tutorial: Contour Center Finder (https://www.pyimagesearch.com/2016/02/01/opencv-center-of-contour/)
7. PyImageSearch tutorial: Object Color Detection (https://www.pyimagesearch.com/2016/02/15/determining-object-color-with-opencv/)
8. Continued research on crowd analysis using computer vision and bird's eye view image transformation techniques

Week 4 (7/6 - 7/10)

Monday 7/6: OUT OF TOWN, hours to be made up throughout the week

Tuesday 7/7
1. AI/ML Scrum
2. NAISE Check In
3. YouTube OpenCV Tutorial part 35 - 38
4. PyImageSearch tutorial: Ordering Object Coordinates (https://www.pyimagesearch.com/2016/03/21/ordering-coordinates-clockwise-with-python-and-opencv/)
5. PyImageSearch tutorial: Size of Objects (https://www.pyimagesearch.com/2016/03/28/measuring-size-of-objects-in-an-image-with-opencv/)
6. PyImageSearch Course day 6 (https://www.pyimagesearch.com/2016/04/04/measuring-distance-between-objects-in-an-image-with-opencv/)
7. Looked for examples of already completed social distancing detectors to use as templates
8. Install tensorflow and keras for deep learning tutorials
9. Keras Introduction Tutorial (https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/)

Wednesday 7/8
1. Student Seminar (Virtual Presentation Prep)
2. NAISE SciComm Training
3. CELS Student Hang
4. Finished Youtube OpenCV Tutorial (part 39 - 41)
5. PyImageSearch Course day 7 & 8 (https://www.pyimagesearch.com/2017/04/03/facial-landmarks-dlib-opencv-python/)
6. PyImageSearch Tutorial: Simple Object Tracking (https://www.pyimagesearch.com/2018/07/23/simple-object-tracking-with-opencv/)
7. PyImageSearch Tutorial: Tracking Multiple Objects (https://www.pyimagesearch.com/2018/08/06/tracking-multiple-objects-with-opencv/)
8. More social distancing research

Thursday 7/9
1. AI/ML Scrum
2. Argonne Student Lecture
3. SAGE Workshop
4. PyImageSearch Course day 9 (https://www.pyimagesearch.com/2017/04/24/eye-blink-detection-opencv-python-dlib/)
5. AI/ML Demo Presentation Prep

Friday 7/10
1. PyImageSearch Tutorial: Deep Learning with OpenCV (https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/)
2. NAISE Seminar
3. AI / ML Demo Presentation prep
4. AI / ML Demo meeting
5. PyImageSearch course day 10 (https://www.pyimagesearch.com/2017/05/08/drowsiness-detection-opencv/)
6. Compiled some more tutorials on Deep learning / PyTorch to begin next week

Week 5 (7/13 - 7/17)

Monday 7/13
1. PyImageSearch Tutorial: Deep Learning Object Detection (https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/)
2. PyImageSearch Tutorial: Real-Time Deep Learning Object Detection (https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/)
3. Deep Learning and Neural Networks with PyTorch Tutorial Part 1 (https://www.youtube.com/watch?v=BzcBsTou0C0&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=1)
4. PyImageSearch course day 11 & 12 (https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/)
5. Planning data collection photo shoot
6. NAISE SciComm Deliverables

Tuesday 7/14
1. AI/ML Scrum
2. NAISE Seminar
3. Deep Learning and Neural Networks with PyTorch Tutorial Part 2 (https://www.youtube.com/watch?v=i2yPxY2rOzs&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=2)
4. PyImageSearch course day 13 (https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/)
5. PyImageSearch Tutorial: Convolutions with Python and OpenCV (https://www.pyimagesearch.com/2016/07/25/convolutions-with-opencv-and-python/)
6. PyImageSearch Tutorial: Pedestrian Detection with OpenCV (https://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/)
7. Data Collection Photoshoot

Wednesday 7/15
1. Student Seminar
2. NAISE SciComm Part 2
3. CELS hang
4. Prep Student Connects presentation
5. Organize photos from yesterday, test with pedestrian detector tutorial
6. PyImageSearch course day 14 (https://www.pyimagesearch.com/2018/04/09/how-to-quickly-build-a-deep-learning-image-dataset/)
7. PyImageSearch tutorial: People Counter (https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/)
8. PyImageSearch tutorial: OpenCV Object Tracking (https://www.pyimagesearch.com/2018/07/30/opencv-object-tracking/)
9. PyImageSearch tutorial: YOLO  Object Tracking (https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/)

Thursday 7/16
1. AI/ML Scrum
2. Argonne Student Lecture
3. Deep Learning and Neural Networks with PyTorch Tutorial Part 3 (https://www.youtube.com/watch?v=ixathu7U-LQ&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=3)
4. Tested family test pics with YOLO detector (worked a lot better then HOG)
5. PyImageSearch course day 15 (https://www.pyimagesearch.com/2018/04/16/keras-and-convolutional-neural-networks-cnns/)
6. PyImageSearch Tutorial: Face Mask Detection (https://www.pyimagesearch.com/2020/05/04/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning/)
7. Student Connects Meeting / Presentation
8. Analyzed PyImageSearch Social Distancing Detector code (https://www.pyimagesearch.com/2020/06/01/opencv-social-distancing-detector/)

Friday 7/17
1. Deep Learning and Neural Networks with PyTorch Tutorial Part 4 (https://www.youtube.com/watch?v=9j-_dOze4IM&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=4)
2. PyImageSearch course day 16 (https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/)
3. Learned about and coded my own non-maxima suppression algorithm
4. Learned about and coded my own centroid tracking algorithm
5. YouTube tutorials by Rocket Systems (https://www.youtube.com/playlist?list=PLWw98q-Xe7iH8UHARl8RGk8MRj1raY4Eh)
	a. Person detection in image
	b. Person detection in video
6. NAISE 5 slide deliverable

Week 6 (7/20 - 7/24)

Monday 7/20
1. Deep Learning and Neural Networks with PyTorch Tutorial Part 5 (https://www.youtube.com/watch?v=9aYuQmMJvjA&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=5)
2. YouTube tutorials by Rocket Systems: Person and Object ID tracking (https://www.youtube.com/playlist?list=PLWw98q-Xe7iH8UHARl8RGk8MRj1raY4Eh)
3. Coded my own person tracking algorithm by combining tutorials from PyImageSearch.com and Rocket Systems YouTube series
4. Analyzed social distancing detector (SDD) program by Rocket Systems
5. NAISE Seminar
6. Continued analyzing example SDD code found online

Tuesday 7/21
1. AI/ML Scrum
2. NAISE Check-in meeting
3. Deep Learning and Neural Networks with PyTorch Tutorial Part 6 (https://www.youtube.com/watch?v=1gQR24B3ISE&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=6)
4. PyImageSearch tutorial: LeNet CNN (https://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/)
5. Continued analyzing example SDD code found online
    (https://github.com/Rahul24-06/Vision-based-Social-Distancing-Monitor)
    (https://github.com/KingArnaiz/Social-Distance-Detector)

Wednesday 7/22
1. Weekly Student Seminar
2. PyImageSearch Tutorial: CNN Object Detection Part 1/4 (https://www.pyimagesearch.com/2020/06/22/turning-any-cnn-image-classifier-into-an-object-detector-with-keras-tensorflow-and-opencv/)
3. PyImageSearch Tutorial: CNN Object Detection Part 2/4 (https://www.pyimagesearch.com/2020/06/29/opencv-selective-search-for-object-detection)
4. Seminar on Argonne COVID research
5. CELS Hang
6. Started analyzing examples of social distancing code that includes bird's eye view transformation (towardsdatascience.com)
7. Reviewed PyImageSearch tutorial on 4-point transformation

Thursday 7/23
1. AI/ML Scrum
2. Argonne Lecture
3. Continuing to analyze examples of social distancing code that includes bird's eye view transformation
4. Clean up 4 point transformation algorithm, include function that takes mouse clicks as inputs
5. Small scale test of perspective transformation with new 4 point algorithm 
6. Prep for AI/ML Demo Presentation

Friday 7/24
1. Small scale image transformation experiment with Lego
2. Testing Lego images with my image transformation algorithm
3. Preparing AI/ML Demo Presentation
4. AI/ML Demo Presentation

Week 7 (7/27 - 7/31)

Monday 7/27
1. Coded and tested part 1 of 3 of my social distancing detector: human detecting / tracking; uses YOLO every N frames to detect people and Centroid Tracking algorithm to track movements every other frame
2. Edited centroid tracking algorithm to return bounding boxes instead of centroid point coordinates
3. Planned out this week's schedule, plan is to finish a draft of my social distancing detector by the end of the week.

Tuesday 7/28
1. AI/ML Scrum
2. Further analysis of the SDD code example I will be using as a guide/template
3. Started OZ_main.py, where the majority of my code will be.
4. Integrated aspects from the mouse_points code I wrote Friday and started to integrate parts of the detecting/tracking algorithm I wrote yesterday. 

Wednesday 7/29
1. NAISE Seminar
2. Continuing to integrate detecting / tracking program into main code
3. CELS Student Hang
4. Analyzing second example of SDD code with Bird's Eye View for alternative ideas for display and image transformation
5. Discovered bug: bounding boxes aren't being drawn around entire person; problem because need to calculate the coordinate at each person's feet = center of bottom of bounding box, will fix first thing tomorrow

Thursday 7/30
1. AI/ML Scrum
2. Fixed bounding box problem (now bounding boxes surround entire person)
3. Replaced Centroid Tracking algorithm with dlib trackers, faster and easier to use
4. Attended Learning Off the Lawn presentations
5. Started phase 3 of the social distance detector: coordinate mapping and distance calculation
6. Transformed bounding box points and wrote helper functions to calculate distances between each pair of points and compare to min safe distance threshold

Friday 7/31
1. Went through code I have so far, worked on organizing and commenting for easier debugging
2. Finished a first draft of the SDD code, very basic output for now
3. Brainstorming ways to test the code, as of now not sure if it works because no info on people in stock videos and don't have markers/object of known measurements
4. Testing YOLO on small scale lego pics, result: YOLO doesn't recognize LEGOs as people
5. AI/ML Demo Meeting
6. Started creating version of SDD that takes in images for testing purposes

Week 8 (8/3 - 8/7)

Monday 8/3
1. Fixed mouse callback issue with ImageSDD code
2. Fixed some errors in helper functions, cleaned up / commented code
3. Finished draft of ImageSDD code
4. Initial video and image tests not looking good, going through code and trying different edits before family photo shoot
5. Brainstormed different options for output frequency aesthetics
6. Initial debugging attempts unsuccessful, will try tomorrow to create a version that uses yolo every frame and see if that does anything

Tuesday 8/4
1. AI/ML Scrum
2. NAISE Check In meeting
3. Made version of SDD code that uses yolo detection every frame, no dlib tracking 
	(runs slow but not terrible, didn't fix violation misidentification problems)
4. Continue debugging, modeling code closer to https://blog.usejournal.com/social-distancing-ai-using-python-deep-learning-c26b20c9aa4c
5. Started outlining final presentation slide deck

Wednesday 8/5
1. NAISE Final Presentation Powerpoint
2. Started outlining presentation script for Friday's Dry Run
3. Finished debugging code
4. NAISE Seminar
5. Code clean up, comments, personalizing

Thursday 8/6
1. AI/ML Scrum
2. Started working on NAISE Blog Post
3. Continuing to clean up / comment code
4. Created list of potential code improvements and additions I want to make after Monday's presentation

Friday 8/7
1. Finished NAISE Blog Post
2. AI/ML Demo Meeting
3. Rehearsing NAISE Presentation
4. NAISE Presentation Dry Run

Week 9 (8/10 - 8/14)

Monday 8/10
1. NAISE Presentation
2. Edited and republished NAISE blog post
3. Started revisiting centroid tracking algorithm for tracking across frames

Tuesday 8/11
1. AI/ML Scrum
2. Continuing to clean up and comment helper function code
3, NAISE Seminar
4. Uploaded NAISE blog post to SAGE website
5. Added feature: prints out total number of detected people, number of safe people, and number of violators every 5 frames
6. Added imutils.resize for consistent dimensions for each video input used
7. Created requirements.txt file

Wednesday 8/12
1. Tried to write helper function to correctly order ROI points, unsuccessful for now
2. Displayed text on first frame image, instructions on which points to click and in what order
3. CELS Hang
4. Added option to use live webcam instead of input video, analyzes continuous video stream
5. Display pedestrians detected, safe pedestrians, and violator pedestrian values on street view output
6. Started reviewing matplotlib, going to output time series data as graph of (violators / total people) vs. time

Thursday 8/13
1. AI/ML Scrum
2. Implemented centroid tracking algorithm to assign unique ID to each detected person
3. Organized output data into ordered dict but matplotlib not working
4. Demo Presentation Prep

Friday 8/14
1. Demo Presentation Prep
2. AI/ML Demo Presentation
3. Worked with Sean and Raj to try to find solution to matplotlib problem, it worked on Sean's machine so not worried about it, might try to use different version of python over the weekend.

Week 10 (8/17 - 8/21)

Monday 8/17
1. Downloaded Python 3.8, created new virtual environment, copied all my SDD code over
2. Matplotlib still not working on my end but apparently it works for Sean so not worrying about it anymore
3. Worked on turning blog post into more formal paper
4. Added output txt file every 20 frames instead of printing every 5 frames

Tuesday 8/18
1. AI/ML Scrum
2. NAISE Seminar
3. Worked on output text file
4. Wrote README.md 

Wednesday 8/19
1. Edited and resubmit READEME.md
2. Worked on paper